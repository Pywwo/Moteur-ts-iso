{"code":"import isoPoint from './isoPoint';\r\nimport './isoSprite';\r\nimport 'phaser';\r\nvar UP = 0;\r\nvar DOWN = 1;\r\nvar FORWARDX = 2;\r\nvar FORWARDY = 3;\r\nvar BACKWARDX = 4;\r\nvar BACKWARDY = 5;\r\nvar BoxCollider = /** @class */ (function () {\r\n    function BoxCollider(sprite) {\r\n        this.sprite = sprite;\r\n        this.scene = sprite.scene;\r\n        this.type = \"basic\";\r\n        this.enable = true;\r\n        this.offset = new isoPoint();\r\n        this.position = new isoPoint(sprite.isoX, sprite.isoY, sprite.isoZ);\r\n        this.prev = new isoPoint(this.position.x, this.position.y, this.position.z);\r\n        this.allowRotation = true;\r\n        this.rotation = sprite.rotation;\r\n        this.preRotation = sprite.rotation;\r\n        this.sourceWidthX = sprite.width / sprite.scaleX;\r\n        this.sourceWidthY = sprite.width / sprite.scaleX;\r\n        this.sourceHeight = sprite.height / sprite.scaleY;\r\n        this.widthX = Math.ceil(sprite.width * 0.5);\r\n        this.widthY = Math.ceil(sprite.width * 0.5);\r\n        this.height = sprite.height - Math.ceil(sprite.width * 0.5);\r\n        this.halfWidthX = Math.abs(this.widthX * 0.5);\r\n        this.halfWidthY = Math.abs(this.widthY * 0.5);\r\n        this.halfHeight = Math.abs(this.height * 0.5);\r\n        this.center = new isoPoint(sprite.isoX + this.halfWidthX, sprite.isoY + this.halfWidthY, sprite.isoZ + this.halfHeight);\r\n        this.velocity = new isoPoint();\r\n        this.newVelocity = new isoPoint();\r\n        this.deltaMax = new isoPoint();\r\n        this.acceleration = new isoPoint();\r\n        this.drag = new isoPoint();\r\n        this.allowGravity = true;\r\n        this.gravity = new isoPoint();\r\n        this.bounce = new isoPoint();\r\n        this.maxVelocity = new isoPoint(10000, 10000, 10000);\r\n        this.angularVelocity = 0;\r\n        this.angularAcceleration = 0;\r\n        this.angularDrag = 0;\r\n        this.maxAngular = 1000;\r\n        this.mass = 1;\r\n        this.angle = 0;\r\n        this.speed = 0;\r\n        this.facing = Phaser.NONE;\r\n        this.immovable = false;\r\n        this.moves = true;\r\n        this.customSeparateX = false;\r\n        this.customSeparateY = false;\r\n        this.customSeparateZ = false;\r\n        this.overlapX = 0;\r\n        this.overlapY = 0;\r\n        this.overlapZ = 0;\r\n        this.embedded = false;\r\n        this.collideWorldBounds = false;\r\n        this.checkCollision = {\r\n            none: false,\r\n            any: true,\r\n            up: true,\r\n            down: true,\r\n            frontX: true,\r\n            frontY: true,\r\n            backX: true,\r\n            backY: true\r\n        };\r\n        this.touching = {\r\n            none: true,\r\n            up: false,\r\n            down: false,\r\n            frontX: false,\r\n            frontY: false,\r\n            backX: false,\r\n            backY: false\r\n        };\r\n        this.wasTouching = new Object({\r\n            none: true,\r\n            up: false,\r\n            down: false,\r\n            frontX: false,\r\n            frontY: false,\r\n            backX: false,\r\n            backY: false\r\n        });\r\n        this.blocked = {\r\n            up: false,\r\n            down: false,\r\n            frontX: false,\r\n            frontY: false,\r\n            backX: false,\r\n            backY: false\r\n        };\r\n        this.phase = 0;\r\n        this._reset = true;\r\n        this._sx = sprite.scaleX;\r\n        this._sy = sprite.scaleY;\r\n        this._dx = 0;\r\n        this._dy = 0;\r\n        this._dz = 0;\r\n        this._corners = [new isoPoint(this.x, this.y, this.z),\r\n            new isoPoint(this.x, this.y, this.z + this.height),\r\n            new isoPoint(this.x, this.y + this.widthY, this.z),\r\n            new isoPoint(this.x, this.y + this.widthY, this.z + this.height),\r\n            new isoPoint(this.x + this.widthX, this.y, this.z),\r\n            new isoPoint(this.x + this.widthX, this.y, this.z + this.height),\r\n            new isoPoint(this.x + this.widthX, this.y + this.widthY, this.z),\r\n            new isoPoint(this.x + this.widthX, this.y + this.widthY, this.z + this.height)\r\n        ];\r\n    }\r\n    BoxCollider.prototype.updateBounds = function () {\r\n        var asx = Math.abs(this.sprite.scaleX);\r\n        var asy = Math.abs(this.sprite.scaleY);\r\n        if (asx !== this._sx || asy !== this._sy) {\r\n            this.widthX = Math.ceil(this.sprite.width * 0.5);\r\n            this.widthY = Math.ceil(this.sprite.width * 0.5);\r\n            this.height = Math.ceil(this.sprite.height - (this.sprite.width * 0.5));\r\n            this.halfWidthX = Math.floor(this.widthX * 0.5);\r\n            this.halfWidthY = Math.floor(this.widthY * 0.5);\r\n            this.halfHeight = Math.floor(this.height * 0.5);\r\n            this._sx = asx;\r\n            this._sy = asy;\r\n            this.center.setTo(this.position.x + this.halfWidthX, this.position.y + this.halfWidthY, this.position.z + this.halfHeight);\r\n            this._reset = true;\r\n        }\r\n    };\r\n    BoxCollider.prototype.update = function (time, delta) {\r\n        if (!this.enable) {\r\n            return;\r\n        }\r\n        this.phase = 1;\r\n        this.wasTouching.none = this.touching.none;\r\n        this.wasTouching.up = this.touching.up;\r\n        this.wasTouching.down = this.touching.down;\r\n        this.wasTouching.backX = this.touching.backX;\r\n        this.wasTouching.backY = this.touching.backY;\r\n        this.wasTouching.frontX = this.touching.frontX;\r\n        this.wasTouching.frontY = this.touching.frontY;\r\n        this.touching.none = true;\r\n        this.touching.up = false;\r\n        this.touching.down = false;\r\n        this.touching.backX = false;\r\n        this.touching.backY = false;\r\n        this.touching.frontX = false;\r\n        this.touching.frontY = false;\r\n        this.blocked.up = false;\r\n        this.blocked.down = false;\r\n        this.blocked.frontY = false;\r\n        this.blocked.frontX = false;\r\n        this.blocked.backY = false;\r\n        this.blocked.backX = false;\r\n        this.embedded = false;\r\n        this.updateBounds();\r\n        this.position.x = this.sprite.isoX + ((this.widthX * -this.sprite.originX) + this.widthX * 0.5) + this.offset.x;\r\n        this.position.y = this.sprite.isoY + ((this.widthY * this.sprite.originX) - this.widthY * 0.5) + this.offset.y;\r\n        this.position.z = this.sprite.isoZ - (Math.abs(this.sprite.height) * (1 - this.sprite.originY)) + (Math.abs(this.sprite.width * 0.5)) + this.offset.z;\r\n        this.rotation = this.sprite.angle;\r\n        this.preRotation = this.rotation;\r\n        if (this._reset) {\r\n            this.prev.x = this.position.x;\r\n            this.prev.y = this.position.y;\r\n            this.prev.z = this.position.z;\r\n        }\r\n        if (this.moves) {\r\n            var world = this.scene.data.parent._isoWorld;\r\n            if (world === undefined)\r\n                return;\r\n            delta /= 1000;\r\n            world.updateMotion(this, delta);\r\n            this.newVelocity.set(this.velocity.x * delta, this.velocity.y * delta, this.velocity.z * delta);\r\n            this.position.x += this.newVelocity.x;\r\n            this.position.y += this.newVelocity.y;\r\n            this.position.z += this.newVelocity.z;\r\n            if (this.position.x !== this.prev.x || this.position.y !== this.prev.y || this.position.z !== this.prev.z) {\r\n                this.speed = Math.sqrt(this.velocity.x * this.velocity.x + this.velocity.y * this.velocity.y + this.velocity.z * this.velocity.z);\r\n                this.angle = Math.atan2(this.velocity.y, this.velocity.x);\r\n            }\r\n            if (this.collideWorldBounds)\r\n                this.checkWorldBounds();\r\n            if (!world.bounds.intersects(this.sprite.isoBounds))\r\n                this.sprite.destroy();\r\n        }\r\n        this._dx = this.deltaX();\r\n        this._dy = this.deltaY();\r\n        this._dz = this.deltaZ();\r\n        this._reset = false;\r\n    };\r\n    BoxCollider.prototype.postUpdate = function () {\r\n        if (!this.enable || this.phase === 2) {\r\n            return;\r\n        }\r\n        this.phase = 2;\r\n        if (this._reset) {\r\n            this.prev.x = this.position.x;\r\n            this.prev.y = this.position.y;\r\n            this.prev.z = this.position.z;\r\n        }\r\n        if (this.deltaAbsX() >= this.deltaAbsY() && this.deltaAbsX() >= this.deltaAbsZ()) {\r\n            if (this.deltaX() < 0)\r\n                this.facing = BACKWARDX;\r\n            else if (this.deltaX() > 0)\r\n                this.facing = FORWARDX;\r\n        }\r\n        else if (this.deltaAbsY() >= this.deltaAbsX() && this.deltaAbsY() >= this.deltaAbsZ()) {\r\n            if (this.deltaY() < 0)\r\n                this.facing = BACKWARDY;\r\n            else if (this.deltaY() > 0)\r\n                this.facing = FORWARDY;\r\n        }\r\n        else {\r\n            if (this.deltaZ() < 0)\r\n                this.facing = DOWN;\r\n            else if (this.deltaZ() > 0)\r\n                this.facing = UP;\r\n        }\r\n        if (this.moves) {\r\n            this._dx = this.deltaX();\r\n            this._dy = this.deltaY();\r\n            this._dz = this.deltaZ();\r\n            if (this.deltaMax.x !== 0 && this._dx !== 0) {\r\n                if (this._dx < 0 && this._dx < -this.deltaMax.x) {\r\n                    this._dx = -this.deltaMax.x;\r\n                }\r\n                else if (this._dx > 0 && this._dx > this.deltaMax.x) {\r\n                    this._dx = this.deltaMax.x;\r\n                }\r\n            }\r\n            if (this.deltaMax.y !== 0 && this._dy !== 0) {\r\n                if (this._dy < 0 && this._dy < -this.deltaMax.y) {\r\n                    this._dy = -this.deltaMax.y;\r\n                }\r\n                else if (this._dy > 0 && this._dy > this.deltaMax.y) {\r\n                    this._dy = this.deltaMax.y;\r\n                }\r\n            }\r\n            if (this.deltaMax.z !== 0 && this._dz !== 0) {\r\n                if (this._dz < 0 && this._dz < -this.deltaMax.z) {\r\n                    this._dz = -this.deltaMax.z;\r\n                }\r\n                else if (this._dz > 0 && this._dz > this.deltaMax.z) {\r\n                    this._dz = this.deltaMax.z;\r\n                }\r\n            }\r\n            this.sprite.isoX += this._dx;\r\n            this.sprite.isoY += this._dy;\r\n            this.sprite.isoZ += this._dz;\r\n        }\r\n        this.center.setTo(this.position.x + this.halfWidthX, this.position.y + this.halfWidthY, this.position.z + this.halfHeight);\r\n        if (this.allowRotation)\r\n            this.sprite.angle += this.deltaR();\r\n        this.prev.x = this.position.x;\r\n        this.prev.y = this.position.y;\r\n        this.prev.z = this.position.z;\r\n        this._reset = false;\r\n    };\r\n    BoxCollider.prototype.destroy = function () {\r\n        this.sprite = null;\r\n    };\r\n    BoxCollider.prototype.checkWorldBounds = function () {\r\n        var world = this.scene.data.parent._isoWorld;\r\n        ;\r\n        if (world === undefined)\r\n            return;\r\n        if (this.position.x < world.bounds.x && world.checkCollision.backX) {\r\n            this.position.x = world.bounds.x;\r\n            this.velocity.x *= -this.bounce.x;\r\n            this.blocked.backX = true;\r\n        }\r\n        else if (this.frontX > world.bounds.frontX && world.checkCollision.frontX) {\r\n            this.position.x = world.bounds.frontX - this.widthX;\r\n            this.velocity.x *= -this.bounce.x;\r\n            this.blocked.frontX = true;\r\n        }\r\n        if (this.position.y < world.bounds.y && world.checkCollision.backY) {\r\n            this.position.y = world.bounds.y;\r\n            this.velocity.y *= -this.bounce.y;\r\n            this.blocked.backY = true;\r\n        }\r\n        else if (this.frontY > world.bounds.frontY && world.checkCollision.frontY) {\r\n            this.position.y = world.bounds.frontY - this.widthY;\r\n            this.velocity.y *= -this.bounce.y;\r\n            this.blocked.frontY = true;\r\n        }\r\n        if (this.position.z < world.bounds.z && world.checkCollision.down) {\r\n            this.position.z = world.bounds.z;\r\n            this.velocity.z *= -this.bounce.z;\r\n            this.blocked.down = true;\r\n        }\r\n        else if (this.top > world.bounds.top && world.checkCollision.up) {\r\n            this.position.z = world.bounds.top - this.height;\r\n            this.velocity.z *= -this.bounce.z;\r\n            this.blocked.up = true;\r\n        }\r\n    };\r\n    BoxCollider.prototype.setType = function (toSet) {\r\n        this.type = toSet;\r\n    };\r\n    BoxCollider.prototype.setSize = function (widthX, widthY, height, offsetX, offsetY, offsetZ) {\r\n        if (typeof offsetX === 'undefined')\r\n            offsetX = this.offset.x;\r\n        if (typeof offsetY === 'undefined')\r\n            offsetY = this.offset.y;\r\n        if (typeof offsetZ === 'undefined')\r\n            offsetZ = this.offset.z;\r\n        this.sourceWidthX = widthX;\r\n        this.sourceWidthY = widthY;\r\n        this.sourceHeight = height;\r\n        this.widthX = (this.sourceWidthX) * this._sx;\r\n        this.widthY = (this.sourceWidthY) * this._sx;\r\n        this.height = (this.sourceHeight) * this._sy;\r\n        this.halfWidthX = Math.floor(this.widthX * 0.5);\r\n        this.halfWidthY = Math.floor(this.widthY * 0.5);\r\n        this.halfHeight = Math.floor(this.height * 0.5);\r\n        this.offset.setTo(offsetX, offsetY, offsetZ);\r\n        this.center.setTo(this.position.x + this.halfWidthX, this.position.y + this.halfWidthY, this.position.z + this.halfHeight);\r\n    };\r\n    BoxCollider.prototype.reset = function (x, y, z) {\r\n        this.velocity.set(0);\r\n        this.acceleration.set(0);\r\n        this.angularVelocity = 0;\r\n        this.angularAcceleration = 0;\r\n        this.position.x = x + ((this.widthX) + this.widthX * 0.5) + this.offset.x;\r\n        this.position.y = y + ((this.widthY) - this.widthY * 0.5) + this.offset.y;\r\n        this.position.z = z - (Math.abs(this.sprite.height)) + (Math.abs(this.sprite.width * 0.5)) + this.offset.z;\r\n        this.prev.x = this.position.x;\r\n        this.prev.y = this.position.y;\r\n        this.prev.z = this.position.z;\r\n        this.rotation = this.sprite.angle;\r\n        this.preRotation = this.rotation;\r\n        this._sx = this.sprite.scaleX;\r\n        this._sy = this.sprite.scaleY;\r\n        this.center.setTo(this.position.x + this.halfWidthX, this.position.y + this.halfWidthY, this.position.z + this.halfHeight);\r\n        this.sprite._isoPositionChanged = true;\r\n    };\r\n    // public hitTest(x: number, y: number, z: number): boolean {\r\n    // \treturn isoCube.contains(this, x, y, z);\r\n    // }\r\n    BoxCollider.prototype.onFloor = function () {\r\n        return this.blocked.down;\r\n    };\r\n    BoxCollider.prototype.onWall = function () {\r\n        return (this.blocked.frontX || this.blocked.frontY || this.blocked.backX || this.blocked.backY);\r\n    };\r\n    BoxCollider.prototype.deltaAbsX = function () {\r\n        return (this.deltaX() > 0 ? this.deltaX() : -this.deltaX());\r\n    };\r\n    BoxCollider.prototype.deltaAbsY = function () {\r\n        return (this.deltaY() > 0 ? this.deltaY() : -this.deltaY());\r\n    };\r\n    BoxCollider.prototype.deltaAbsZ = function () {\r\n        return (this.deltaZ() > 0 ? this.deltaZ() : -this.deltaZ());\r\n    };\r\n    BoxCollider.prototype.deltaX = function () {\r\n        return this.position.x - this.prev.x;\r\n    };\r\n    BoxCollider.prototype.deltaY = function () {\r\n        return this.position.y - this.prev.y;\r\n    };\r\n    BoxCollider.prototype.deltaZ = function () {\r\n        return this.position.z - this.prev.z;\r\n    };\r\n    BoxCollider.prototype.deltaR = function () {\r\n        return this.rotation - this.preRotation;\r\n    };\r\n    BoxCollider.prototype.getCorners = function () {\r\n        this._corners[0].setTo(this.x, this.y, this.z);\r\n        this._corners[1].setTo(this.x, this.y, this.z + this.height);\r\n        this._corners[2].setTo(this.x, this.y + this.widthY, this.z);\r\n        this._corners[3].setTo(this.x, this.y + this.widthY, this.z + this.height);\r\n        this._corners[4].setTo(this.x + this.widthX, this.y, this.z);\r\n        this._corners[5].setTo(this.x + this.widthX, this.y, this.z + this.height);\r\n        this._corners[6].setTo(this.x + this.widthX, this.y + this.widthY, this.z);\r\n        this._corners[7].setTo(this.x + this.widthX, this.y + this.widthY, this.z + this.height);\r\n        return this._corners;\r\n    };\r\n    Object.defineProperty(BoxCollider.prototype, \"top\", {\r\n        get: function () {\r\n            return this.position.z + this.height;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BoxCollider.prototype, \"frontX\", {\r\n        get: function () {\r\n            return this.position.x + this.widthX;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BoxCollider.prototype, \"right\", {\r\n        get: function () {\r\n            return this.position.x + this.widthX;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BoxCollider.prototype, \"frontY\", {\r\n        get: function () {\r\n            return this.position.y + this.widthY;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BoxCollider.prototype, \"bottom\", {\r\n        get: function () {\r\n            return this.position.y + this.widthY;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BoxCollider.prototype, \"x\", {\r\n        get: function () {\r\n            return this.position.x;\r\n        },\r\n        set: function (value) {\r\n            this.position.x = value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BoxCollider.prototype, \"y\", {\r\n        get: function () {\r\n            return this.position.y;\r\n        },\r\n        set: function (value) {\r\n            this.position.y = value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BoxCollider.prototype, \"z\", {\r\n        get: function () {\r\n            return this.position.z;\r\n        },\r\n        set: function (value) {\r\n            this.position.z = value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return BoxCollider;\r\n}());\r\nexport default BoxCollider;\r\n","references":["/home/Pywwo/projet_libre/moteur_ts_iso/src/mon-plugin/isoPoint.ts","/home/Pywwo/projet_libre/moteur_ts_iso/src/mon-plugin/World.ts","/home/Pywwo/projet_libre/moteur_ts_iso/src/mon-plugin/isoSprite.ts","/home/Pywwo/projet_libre/moteur_ts_iso/src/mon-plugin/isoSprite.ts","/home/Pywwo/projet_libre/moteur_ts_iso/node_modules/phaser/types/phaser.d.ts"]}
