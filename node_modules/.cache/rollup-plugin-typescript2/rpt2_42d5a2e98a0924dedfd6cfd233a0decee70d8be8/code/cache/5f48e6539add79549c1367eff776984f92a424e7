{"code":"import Point3 from './isoPoint';\r\nexport var CLASSIC = Math.atan(0.5);\r\nvar IsoProjector = /** @class */ (function () {\r\n    function IsoProjector(scene, projectionAngle) {\r\n        this.scene = scene;\r\n        this._transform = null;\r\n        this._projectionAngle = 0;\r\n        this.projectionAngle = projectionAngle || CLASSIC;\r\n        this.origin = new Phaser.Geom.Point(0.5, 0.5);\r\n    }\r\n    Object.defineProperty(IsoProjector.prototype, \"projectionAngle\", {\r\n        get: function () {\r\n            return this._projectionAngle;\r\n        },\r\n        set: function (angle) {\r\n            if (angle === this._projectionAngle) {\r\n                return;\r\n            }\r\n            this._projectionAngle = angle;\r\n            this._transform = [Math.cos(this._projectionAngle), Math.sin(this._projectionAngle)];\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    IsoProjector.prototype.project = function (point3, out) {\r\n        if (out === void 0) { out = new Phaser.Geom.Point(); }\r\n        out.x = (point3.x - point3.y) * this._transform[0];\r\n        out.y = ((point3.x + point3.y) * this._transform[1]) - point3.z;\r\n        var _a = this.scene.sys.game.config, width = _a.width, height = _a.height;\r\n        out.x += width * this.origin.x;\r\n        out.y += height * this.origin.y;\r\n        return out;\r\n    };\r\n    IsoProjector.prototype.projectXY = function (point3, out) {\r\n        if (out === void 0) { out = new Phaser.Geom.Point(); }\r\n        out.x = (point3.x - point3.y) * this._transform[0];\r\n        out.y = (point3.x + point3.y) * this._transform[1];\r\n        //    out.x += this.game.world.width * this.origin.x;\r\n        //    out.y += this.game.world.height * this.origin.y;\r\n        return out;\r\n    };\r\n    IsoProjector.prototype.unproject = function (point, out, z) {\r\n        //    const x = point.x - this.game.world.x - (this.game.world.width * this.origin.x);\r\n        //   const y = point.y - this.game.world.y - (this.game.world.height * this.origin.y) + z;\r\n        if (out === void 0) { out = new Point3(); }\r\n        if (z === void 0) { z = 0; }\r\n        //    out.x = x / (2 * this._transform[0]) + y / (2 * this._transform[1]);\r\n        //    out.y = -(x / (2 * this._transform[0])) + y / (2 * this._transform[1]);\r\n        out.z = z;\r\n        return out;\r\n    };\r\n    return IsoProjector;\r\n}());\r\nexport default IsoProjector;\r\n","references":["/home/Pywwo/projet_libre/experience-phaser-isoetric-plugin/src/mon-plugin/isoPoint.ts"]}
