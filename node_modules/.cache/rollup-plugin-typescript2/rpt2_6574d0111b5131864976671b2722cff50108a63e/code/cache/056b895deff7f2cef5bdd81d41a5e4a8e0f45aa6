{"code":"import { __extends } from \"tslib\";\r\nimport isoPoint from './isoPoint';\r\nimport 'phaser';\r\nimport isoCube from './isoCube';\r\nvar IsoSprite = /** @class */ (function (_super) {\r\n    __extends(IsoSprite, _super);\r\n    function IsoSprite(scene, x, y, z, texture, frame) {\r\n        if (frame === void 0) { frame = 0; }\r\n        var _this = _super.call(this, scene, x, y, texture, frame) || this;\r\n        _this.type = \"IsoSprite\";\r\n        _this._isoPosition = new isoPoint(x, y, z);\r\n        _this.snap = 0;\r\n        _this._isoPositionChanged = true;\r\n        _this._isoBoundsChanged = true;\r\n        _this._prepare();\r\n        _this._isoBounds = undefined;\r\n        _this._isoBounds = _this.resetIsoBounds();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(IsoSprite.prototype, \"isoX\", {\r\n        get: function () {\r\n            return this._isoPosition.x;\r\n        },\r\n        set: function (value) {\r\n            this._isoPosition.x = value;\r\n            this._isoPositionChanged = this._isoBoundsChanged = true;\r\n            if (this.body) {\r\n                //@ts-ignore\r\n                this.body._reset = true;\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(IsoSprite.prototype, \"isoY\", {\r\n        get: function () {\r\n            return this._isoPosition.y;\r\n        },\r\n        set: function (value) {\r\n            this._isoPosition.y = value;\r\n            this._isoPositionChanged = this._isoBoundsChanged = true;\r\n            if (this.body) {\r\n                //@ts-ignore\r\n                this.body._reset = true;\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(IsoSprite.prototype, \"isoZ\", {\r\n        get: function () {\r\n            return this._isoPosition.z;\r\n        },\r\n        set: function (value) {\r\n            this._isoPosition.z = value;\r\n            this._isoPositionChanged = this._isoBoundsChanged = true;\r\n            if (this.body) {\r\n                //@ts-ignore\r\n                this.body._reset = true;\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(IsoSprite.prototype, \"isoPosition\", {\r\n        get: function () {\r\n            return this._isoPosition;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(IsoSprite.prototype, \"isoBounds\", {\r\n        get: function () {\r\n            if (this._isoBoundsChanged || !this._isoBounds) {\r\n                this.resetIsoBounds();\r\n                this._isoBoundsChanged = false;\r\n            }\r\n            return this._isoBounds;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    IsoSprite.prototype._prepare = function () {\r\n        if (this._isoPositionChanged) {\r\n            var name_1 = this.scene.sys.settings.key;\r\n            var projector = this.scene.data.parent.projector;\r\n            var _a = projector.project(this._isoPosition), x = _a.x, y = _a.y;\r\n            this.x = x;\r\n            this.y = y;\r\n            this.depth = (this._isoPosition.x + this._isoPosition.y) + (this._isoPosition.z * 2);\r\n            if (this.snap > 0) {\r\n                this.x = Phaser.Math.Snap.To(this.x, this.snap);\r\n                this.y = Phaser.Math.Snap.To(this.y, this.snap);\r\n            }\r\n            this._isoPositionChanged = this._isoBoundsChanged = true;\r\n        }\r\n    };\r\n    IsoSprite.prototype.preUpdate = function (time, delta) {\r\n        _super.prototype.preUpdate.call(this, time, delta);\r\n        this._prepare();\r\n    };\r\n    IsoSprite.prototype.resetIsoBounds = function () {\r\n        if (typeof this._isoBounds === 'undefined') {\r\n            this._isoBounds = new isoCube();\r\n        }\r\n        var asx = Math.abs(this.scaleX);\r\n        var asy = Math.abs(this.scaleY);\r\n        this._isoBounds.widthX = Math.round(Math.abs(this.width) * 0.5) * asx;\r\n        this._isoBounds.widthY = Math.round(Math.abs(this.width) * 0.5) * asx;\r\n        this._isoBounds.height = Math.round(Math.abs(this.height) - (Math.abs(this.width) * 0.5)) * asy;\r\n        this._isoBounds.x = this.isoX + (this._isoBounds.widthX * -this.originX) + this._isoBounds.widthX * 0.5;\r\n        this._isoBounds.y = this.isoY + (this._isoBounds.widthY * this.originX) - this._isoBounds.widthY * 0.5;\r\n        this._isoBounds.z = this.isoZ - (Math.abs(this.height) * (1 - this.originY)) + (Math.abs(this.width * 0.5));\r\n        return this._isoBounds;\r\n    };\r\n    return IsoSprite;\r\n}(Phaser.GameObjects.Sprite));\r\nexport default IsoSprite;\r\n","references":["/home/Pywwo/projet_libre/moteur_ts_iso/src/mon-plugin/isoPoint.ts","/home/Pywwo/projet_libre/moteur_ts_iso/node_modules/phaser/types/phaser.d.ts","/home/Pywwo/projet_libre/moteur_ts_iso/src/mon-plugin/isoCube.ts"]}
