{"code":"import { __extends } from \"tslib\";\r\nimport 'phaser';\r\nimport IsoSprite from './mon-plugin/isoSprite';\r\nimport IsoProjector from './mon-plugin/Projector';\r\nimport tiles from \"./variableWorld\";\r\nimport World from \"./mon-plugin/world/World\";\r\nvar MyPluginIsoScene = /** @class */ (function (_super) {\r\n    __extends(MyPluginIsoScene, _super);\r\n    function MyPluginIsoScene() {\r\n        var _this = _super.call(this, { key: 'MyPluginIsoScene' }) || this;\r\n        _this.projector = new IsoProjector(_this);\r\n        _this._isoWorld = new World(_this, 12 * 45, 12 * 45, 12 * 45);\r\n        return _this;\r\n    }\r\n    MyPluginIsoScene.prototype.preload = function () {\r\n    };\r\n    MyPluginIsoScene.prototype.handleWheelZoom = function (pointer, gameObjects, deltaX, deltaY, deltaZ) {\r\n        if (pointer.camera !== undefined) {\r\n            if (deltaY > 0)\r\n                this.cameras.main.zoom -= .1;\r\n            if (deltaY < 0)\r\n                this.cameras.main.zoom += .1;\r\n        }\r\n    };\r\n    MyPluginIsoScene.prototype.create = function () {\r\n        this.cameras.main.setBackgroundColor('#2389DA');\r\n        this.cameras.main.setViewport(0, 0, 1900, 900);\r\n        this.projector.origin.setTo(0, -0.25);\r\n        this.cameras.main.centerOn(0, 0);\r\n        this.input.on('wheel', this.handleWheelZoom, this);\r\n        this._isoWorld.gravity.setTo(0, 0, -500);\r\n        this.sys.events.on('update', this._isoWorld.update, this._isoWorld);\r\n        this.sys.events.on('postupdate', this._isoWorld.postUpdate, this._isoWorld);\r\n        // this._isoWorld.setBounds(0, 0, 0, 12*45, 12*45, 12*45);\r\n        this.spawnTiles();\r\n    };\r\n    MyPluginIsoScene.prototype.update = function (time, delta) {\r\n        var speed = 200;\r\n        if (this.keys.up.isDown) {\r\n            this.player.body.velocity.y = -speed;\r\n        }\r\n        else if (this.keys.down.isDown) {\r\n            this.player.body.velocity.y = speed;\r\n        }\r\n        else {\r\n            this.player.body.velocity.y = 0;\r\n        }\r\n        if (this.keys.left.isDown) {\r\n            this.player.body.velocity.x = -speed;\r\n        }\r\n        else if (this.keys.right.isDown) {\r\n            this.player.body.velocity.x = speed;\r\n        }\r\n        else {\r\n            this.player.body.velocity.x = 0;\r\n        }\r\n        // @ts-ignore\r\n        this._isoWorld.collide(this.isoGroup);\r\n    };\r\n    MyPluginIsoScene.prototype.showDepth = function (sprite, pointer) {\r\n    };\r\n    MyPluginIsoScene.prototype.spawnTiles = function () {\r\n        var _this = this;\r\n        this.isoGroup = this.add.group();\r\n        for (var i = 0; i < tiles.length; i++) {\r\n            var a = new IsoSprite(this, tiles[i].x, tiles[i].y, tiles[i].z, tiles[i].texture);\r\n            this.isoGroup.add(a, true);\r\n            a.setInteractive();\r\n            a.on('pointerdown', this.showDepth.bind(this, a));\r\n            a.on('pointerover', function (pointer) {\r\n                this.setTint(0x86bfda);\r\n            });\r\n            a.on('pointerout', function () {\r\n                this.clearTint();\r\n            });\r\n            this._isoWorld.enable(a);\r\n            // @ts-ignore\r\n            a.body.collideWorldBounds = true;\r\n            // @ts-ignore\r\n            a.body.immovable = true;\r\n            if (tiles[i][\"test\"] !== undefined) {\r\n                // @ts-ignore\r\n                a.body.allowGravity = false;\r\n            }\r\n            if (tiles[i]['bodyType'] !== undefined) {\r\n                // @ts-ignore\r\n                a.body.immovable = false;\r\n                // a.body[tiles[i]['bodyType']] = tiles[i].setTo;\r\n            }\r\n            // @ts-ignore\r\n            a.body.setSize(48, 48, 48, 0, 0, 0);\r\n        }\r\n        this.player = new IsoSprite(this, 128, 128, 500, 'tile');\r\n        this.isoGroup.add(this.player, true);\r\n        this.player.tint = 0x86bfda;\r\n        this._isoWorld.enable(this.player);\r\n        this.player.body.setSize(48, 48, 48);\r\n        this.player.body.collideWorldBounds = true;\r\n        this.player.body.setType(\"player\");\r\n        this.keys = this.input.keyboard.addKeys({\r\n            up: 'up',\r\n            down: 'down',\r\n            left: 'left',\r\n            right: 'right'\r\n        });\r\n        this.input.keyboard.on('keydown', function (event) {\r\n            switch (event.key) {\r\n                case 'a':\r\n                    _this.player.body.velocity.z = 400;\r\n                    break;\r\n            }\r\n        });\r\n    };\r\n    return MyPluginIsoScene;\r\n}(Phaser.Scene));\r\nvar StarterScene = /** @class */ (function (_super) {\r\n    __extends(StarterScene, _super);\r\n    function StarterScene() {\r\n        return _super.call(this, { key: 'StarterScene' }) || this;\r\n    }\r\n    StarterScene.prototype.preload = function () {\r\n        this.load.image('tile', './assets/cube2.png');\r\n        this.load.image('player', './assets/petit_cube.png');\r\n    };\r\n    StarterScene.prototype.create = function () {\r\n        this.scene.start('MyPluginIsoScene');\r\n    };\r\n    return StarterScene;\r\n}(Phaser.Scene));\r\nvar config = {\r\n    type: Phaser.AUTO,\r\n    backgroundColor: '#CEDBD8',\r\n    width: 1900,\r\n    height: 900,\r\n    scene: [StarterScene, MyPluginIsoScene]\r\n};\r\nvar game = new Phaser.Game(config);\r\n","references":["/home/Pywwo/projet_libre/moteur_ts_iso/node_modules/phaser/types/phaser.d.ts","/home/Pywwo/projet_libre/moteur_ts_iso/src/mon-plugin/isoSprite.ts","/home/Pywwo/projet_libre/moteur_ts_iso/src/mon-plugin/Projector.ts","/home/Pywwo/projet_libre/moteur_ts_iso/src/variableWorld.ts","/home/Pywwo/projet_libre/moteur_ts_iso/src/mon-plugin/world/World.ts"]}
