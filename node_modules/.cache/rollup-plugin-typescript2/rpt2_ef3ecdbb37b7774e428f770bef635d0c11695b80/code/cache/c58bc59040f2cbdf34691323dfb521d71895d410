{"code":"import isoPoint from './isoPoint';\r\nvar Cube = /** @class */ (function () {\r\n    function Cube(x, y, z, widthX, widthY, height) {\r\n        if (x === void 0) { x = 0; }\r\n        if (y === void 0) { y = 0; }\r\n        if (z === void 0) { z = 0; }\r\n        if (widthX === void 0) { widthX = 0; }\r\n        if (widthY === void 0) { widthY = 0; }\r\n        if (height === void 0) { height = 0; }\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        this.widthX = widthX;\r\n        this.widthY = widthY;\r\n        this.height = height;\r\n        this._corners = [\r\n            new isoPoint(this.x, this.y, this.z),\r\n            new isoPoint(this.x, this.y, this.z + this.height),\r\n            new isoPoint(this.x, this.y + this.widthY, this.z),\r\n            new isoPoint(this.x, this.y + this.widthY, this.z + this.height),\r\n            new isoPoint(this.x + this.widthX, this.y, this.z),\r\n            new isoPoint(this.x + this.widthX, this.y, this.z + this.height),\r\n            new isoPoint(this.x + this.widthX, this.y + this.widthY, this.z),\r\n            new isoPoint(this.x + this.widthX, this.y + this.widthY, this.z + this.height)\r\n        ];\r\n    }\r\n    Cube.prototype.setTo = function (x, y, z, widthX, widthY, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        this.widthX = widthX;\r\n        this.widthY = widthY;\r\n        this.height = height;\r\n        return this;\r\n    };\r\n    Cube.prototype.copyFrom = function (source) {\r\n        this.setTo(source.x, source.y, source.z, source.widthX, source.widthY, source.height);\r\n    };\r\n    Cube.prototype.copyTo = function (dest) {\r\n        dest.x = this.x;\r\n        dest.y = this.y;\r\n        dest.z = this.z;\r\n        dest.widthX = this.widthX;\r\n        dest.widthY = this.widthY;\r\n        dest.height = this.height;\r\n        return dest;\r\n    };\r\n    Cube.prototype.size = function (output) {\r\n        return Cube.size(this, output);\r\n    };\r\n    Cube.prototype.contains = function (x, y, z) {\r\n        return Cube.contains(this, x, y, z);\r\n    };\r\n    Cube.prototype.containsXY = function (x, y) {\r\n        return Cube.containsXY(this, x, y);\r\n    };\r\n    Cube.prototype.clone = function (output) {\r\n        return Cube.clone(this, output);\r\n    };\r\n    Cube.prototype.intersects = function (b) {\r\n        return Cube.intersects(this, b);\r\n    };\r\n    Cube.prototype.getCorners = function () {\r\n        this._corners[0].setTo(this.x, this.y, this.z);\r\n        this._corners[1].setTo(this.x, this.y, this.z + this.height);\r\n        this._corners[2].setTo(this.x, this.y + this.widthY, this.z);\r\n        this._corners[3].setTo(this.x, this.y + this.widthY, this.z + this.height);\r\n        this._corners[4].setTo(this.x + this.widthX, this.y, this.z);\r\n        this._corners[5].setTo(this.x + this.widthX, this.y, this.z + this.height);\r\n        this._corners[6].setTo(this.x + this.widthX, this.y + this.widthY, this.z);\r\n        this._corners[7].setTo(this.x + this.widthX, this.y + this.widthY, this.z + this.height);\r\n        return this._corners;\r\n    };\r\n    Object.defineProperty(Cube.prototype, \"halfWidthX\", {\r\n        get: function () {\r\n            return Math.round(this.widthX * 0.5);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Cube.prototype, \"halfWidthY\", {\r\n        get: function () {\r\n            return Math.round(this.widthY * 0.5);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Cube.prototype, \"halfHeight\", {\r\n        get: function () {\r\n            return Math.round(this.height * 0.5);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Cube.prototype, \"bottom\", {\r\n        get: function () {\r\n            return this.z;\r\n        },\r\n        set: function (value) {\r\n            if (value >= this.top) {\r\n                this.height = 0;\r\n            }\r\n            else {\r\n                this.height = (this.top - value);\r\n            }\r\n            this.z = value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Cube.prototype, \"top\", {\r\n        get: function () {\r\n            return this.z + this.height;\r\n        },\r\n        set: function (value) {\r\n            if (value <= this.z) {\r\n                this.height = 0;\r\n            }\r\n            else {\r\n                this.height = (value - this.z);\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Cube.prototype, \"backX\", {\r\n        get: function () {\r\n            return this.x;\r\n        },\r\n        set: function (value) {\r\n            if (value >= this.frontX) {\r\n                this.widthX = 0;\r\n            }\r\n            else {\r\n                this.widthX = (this.frontX - value);\r\n            }\r\n            this.x = value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Cube.prototype, \"backY\", {\r\n        get: function () {\r\n            return this.y;\r\n        },\r\n        set: function (value) {\r\n            if (value >= this.frontY) {\r\n                this.widthY = 0;\r\n            }\r\n            else {\r\n                this.widthY = (this.frontY - value);\r\n            }\r\n            this.y = value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Cube.prototype, \"frontX\", {\r\n        get: function () {\r\n            return this.x + this.widthX;\r\n        },\r\n        set: function (value) {\r\n            if (value <= this.x) {\r\n                this.widthX = 0;\r\n            }\r\n            else {\r\n                this.widthX = (value - this.x);\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Cube.prototype, \"frontY\", {\r\n        get: function () {\r\n            return this.y + this.widthY;\r\n        },\r\n        set: function (value) {\r\n            if (value <= this.y) {\r\n                this.widthY = 0;\r\n            }\r\n            else {\r\n                this.widthY = (value - this.y);\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Cube.prototype, \"volume\", {\r\n        get: function () {\r\n            return this.widthX * this.widthY * this.height;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Cube.prototype, \"centerX\", {\r\n        get: function () {\r\n            return this.x + this.halfWidthX;\r\n        },\r\n        set: function (value) {\r\n            this.x = value - this.halfWidthX;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Cube.prototype, \"centerY\", {\r\n        get: function () {\r\n            return this.y + this.halfWidthY;\r\n        },\r\n        set: function (value) {\r\n            this.y = value - this.halfWidthY;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Cube.prototype, \"centerZ\", {\r\n        get: function () {\r\n            return this.z + this.halfHeight;\r\n        },\r\n        set: function (value) {\r\n            this.z = value - this.halfHeight;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Cube.prototype, \"randomX\", {\r\n        get: function () {\r\n            return this.x + (Math.random() * this.widthX);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Cube.prototype, \"randomY\", {\r\n        get: function () {\r\n            return this.y + (Math.random() * this.widthY);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Cube.prototype, \"randomZ\", {\r\n        get: function () {\r\n            return this.z + (Math.random() * this.height);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Cube.prototype, \"empty\", {\r\n        get: function () {\r\n            return (!this.widthX || !this.widthY || !this.height);\r\n        },\r\n        set: function (value) {\r\n            if (value === true) {\r\n                this.setTo(0, 0, 0, 0, 0, 0);\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Cube.size = function (a, output) {\r\n        if (typeof output === 'undefined' || output === null) {\r\n            output = new isoPoint(a.widthX, a.widthY, a.height);\r\n        }\r\n        else {\r\n            output.setTo(a.widthX, a.widthY, a.height);\r\n        }\r\n        return output;\r\n    };\r\n    Cube.clone = function (a, output) {\r\n        if (typeof output === 'undefined' || output === null) {\r\n            output = new Cube(a.x, a.y, a.z, a.widthX, a.widthY, a.height);\r\n        }\r\n        else {\r\n            output.setTo(a.x, a.y, a.z, a.widthX, a.widthY, a.height);\r\n        }\r\n        return output;\r\n    };\r\n    Cube.contains = function (a, x, y, z) {\r\n        if (a.widthX <= 0 || a.widthY <= 0 || a.height <= 0) {\r\n            return false;\r\n        }\r\n        return (x >= a.x && x <= a.frontX && y >= a.y && y <= a.frontY && z >= a.z && z <= a.top);\r\n    };\r\n    Cube.containsXY = function (a, x, y) {\r\n        if (a.widthX <= 0 || a.widthY <= 0) {\r\n            return false;\r\n        }\r\n        return (x >= a.x && x <= a.frontX && y >= a.y && y <= a.frontY);\r\n    };\r\n    Cube.containsPoint3 = function (a, point3) {\r\n        return Cube.contains(a, point3.x, point3.y, point3.z);\r\n    };\r\n    Cube.containsCube = function (a, b) {\r\n        //  If the given cube has a larger volume than this one then it can never contain it\r\n        if (a.volume > b.volume) {\r\n            return false;\r\n        }\r\n        return (a.x >= b.x && a.y >= b.y && a.z >= b.z && a.frontX <= b.frontX && a.frontY <= b.frontY && a.top <= b.top);\r\n    };\r\n    Cube.intersects = function (a, b) {\r\n        if (a.widthX <= 0 || a.widthY <= 0 || a.height <= 0 || b.widthX <= 0 || b.widthY <= 0 || b.height <= 0) {\r\n            return false;\r\n        }\r\n        return !(a.frontX < b.x || a.frontY < b.y || a.x > b.frontX || a.y > b.frontY || a.z > b.top || a.top < b.z);\r\n    };\r\n    return Cube;\r\n}());\r\nexport default Cube;\r\n","references":["/home/Pywwo/projet_libre/moteur_ts_iso/src/mon-plugin/isoPoint.ts"]}
